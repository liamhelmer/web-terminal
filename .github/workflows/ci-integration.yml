name: Integration Tests

# Run integration tests that require both backend and frontend
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  integration:
    name: Full Stack Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Setup Rust for backend
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921 # stable
        with:
          toolchain: stable

      - name: Rust cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1
        with:
          key: integration-${{ hashFiles('**/Cargo.lock') }}

      # Setup Node.js for frontend
      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Build backend
      - name: Build backend
        run: cargo build --release

      # Build frontend
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        working-directory: ./frontend
        run: pnpm run build

      # Copy frontend assets to backend static directory
      - name: Copy frontend assets to backend
        run: |
          mkdir -p static
          cp -r frontend/dist/* static/

      # Start backend server on single port (8080)
      - name: Start backend server
        run: |
          # Start server in background
          WEB_TERMINAL_PORT=8080 \
          WEB_TERMINAL_LOG_LEVEL=info \
          ./target/release/web-terminal start &

          # Store PID for cleanup
          echo $! > server.pid

          # Wait for server to be ready (max 30s)
          echo "Waiting for server to start on port 8080..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/health > /dev/null 2>&1; then
              echo "Server is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 1
          done

          # Verify server is running
          if ! curl -f http://localhost:8080/health > /dev/null 2>&1; then
            echo "Server failed to start!"
            cat server.log
            exit 1
          fi
        env:
          WEB_TERMINAL_JWT_SECRET: test-secret-key-for-ci

      # Install Playwright for E2E tests
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: pnpm exec playwright install --with-deps chromium

      # Run E2E tests against running server
      - name: Run E2E integration tests
        working-directory: ./frontend
        run: pnpm run test:e2e
        env:
          # Test against single-port server
          TEST_BASE_URL: http://localhost:8080

      # Upload Playwright report on failure
      - name: Upload Playwright report
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: playwright-integration-report
          path: frontend/playwright-report/
          retention-days: 7

      # Upload server logs on failure
      - name: Upload server logs
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: server-logs
          path: |
            server.log
            logs/
          retention-days: 7

      # Cleanup: Stop server
      - name: Stop backend server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi

  # Docker build test (ensures Dockerfile works)
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Build Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: false
          tags: web-terminal:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Start container on single port 8080
          docker run -d \
            --name web-terminal-test \
            -p 8080:8080 \
            -e WEB_TERMINAL_PORT=8080 \
            -e WEB_TERMINAL_JWT_SECRET=test-secret \
            web-terminal:test

          # Wait for health check
          echo "Waiting for container to be healthy..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/health > /dev/null 2>&1; then
              echo "Container is healthy!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 1
          done

          # Verify health endpoint
          curl -f http://localhost:8080/health || {
            echo "Health check failed!"
            docker logs web-terminal-test
            exit 1
          }

          # Verify static assets are served
          curl -f http://localhost:8080/ || {
            echo "Static assets not served!"
            docker logs web-terminal-test
            exit 1
          }

          # Cleanup
          docker stop web-terminal-test
          docker rm web-terminal-test

  # All integration tests must pass
  integration-success:
    name: Integration Tests Success
    if: always()
    needs: [integration, docker-build]
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ] || [ "${{ contains(needs.*.result, 'cancelled') }}" = "true" ]; then
            echo "One or more integration tests failed or were cancelled"
            exit 1
          fi
          echo "All integration tests passed successfully"