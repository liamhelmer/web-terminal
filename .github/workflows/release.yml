name: Release

# Trigger on version tags (v1.0.0, v2.1.3, etc.)
on:
  push:
    tags:
      - 'v*'

# Use OIDC for secure cloud deployments (no long-lived secrets)
permissions:
  contents: write
  packages: write
  id-token: write

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ## Release ${{ steps.get_version.outputs.version }}

            ### Installation

            Download the appropriate binary for your platform below.

            ### Docker

            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
            ```

            ### What's Changed

            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.

  # Build cross-platform binaries
  build-binaries:
    name: Build Binary (${{ matrix.target }})
    needs: create-release
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: web-terminal-linux-amd64
          # Linux aarch64 (ARM)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: web-terminal-linux-arm64
          # macOS universal (x86_64 + aarch64)
          - os: macos-latest
            target: universal-apple-darwin
            asset_name: web-terminal-macos-universal
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: web-terminal-macos-amd64
          # macOS aarch64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: web-terminal-macos-arm64
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: web-terminal-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921 # stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1
        with:
          key: release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      # Use taiki-e/upload-rust-binary-action for cross-platform builds
      - name: Build and upload binary
        uses: taiki-e/upload-rust-binary-action@8eaf379960d24078f1e4c37e96b6d0b7f35c0e48 # v1.18.0
        with:
          bin: web-terminal
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}

  # Build and push Docker image
  build-docker:
    name: Build and Push Docker Image
    needs: create-release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.create-release.outputs.version }}

  # Deploy to production (optional - requires cloud credentials)
  deploy-production:
    name: Deploy to Production
    needs: [create-release, build-docker]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Only run on repository owner (not forks)
    if: github.repository_owner == 'liamhelmer'
    environment:
      name: production
      url: https://web-terminal.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Example: Deploy to AWS ECS using OIDC (no long-lived secrets)
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-deploy
          aws-region: us-east-1

      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster web-terminal-cluster \
            --service web-terminal-service \
            --force-new-deployment \
            --region us-east-1

      # Example: Deploy to Kubernetes
      # - name: Setup kubectl
      #   uses: azure/setup-kubectl@v3
      #
      # - name: Deploy to Kubernetes
      #   run: |
      #     kubectl set image deployment/web-terminal \
      #       web-terminal=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }} \
      #       -n production

  # Release success
  release-success:
    name: Release Success
    if: always()
    needs: [create-release, build-binaries, build-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ] || [ "${{ contains(needs.*.result, 'cancelled') }}" = "true" ]; then
            echo "One or more release jobs failed or were cancelled"
            exit 1
          fi
          echo "Release completed successfully!"
          echo "Version: ${{ needs.create-release.outputs.version }}"
          echo "Release URL: ${{ needs.create-release.outputs.upload_url }}"